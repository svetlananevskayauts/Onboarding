// Dashboard JavaScript
document.addEventListener('DOMContentLoaded', function() {
    // Initialize dashboard
    initializeOnboardingFlow();
    initializeTeamManagement();
    initializeAnimations();
    
    console.log('Dashboard initialized with data:', window.dashboardData);
});

// Onboarding Flow Management
function initializeOnboardingFlow() {
    const onboardingSteps = document.querySelectorAll('.onboarding-step');
    let currentStep = 1;
    
    // Initialize step states
    updateStepStates();
    
    // Step header click handlers
    onboardingSteps.forEach((step, index) => {
        const stepHeader = step.querySelector('.step-header');
        stepHeader.addEventListener('click', () => {
            toggleStep(index + 1);
        });
    });
    
    // Initialize first step as expanded
    if (onboardingSteps.length > 0) {
        onboardingSteps[0].classList.add('active');
    }
    
    // Auto-advance steps based on form completion
    setupFormCompletionDetection();
    
    function updateStepStates() {
        // Only update visual states, don't automatically mark as completed
        onboardingSteps.forEach((step, index) => {
            const stepNumber = index + 1;
            const isCompleted = step.getAttribute('data-completed') === 'true';
            
            // Don't change completion status just by navigating
            if (isCompleted) {
                step.classList.add('completed');
            } else {
                step.classList.remove('completed');
            }
            
            // Only show active state for current step
            if (stepNumber === currentStep) {
                step.classList.add('active');
            } else {
                step.classList.remove('active');
            }
        });
    }
    
    function toggleStep(stepNumber) {
        const step = document.querySelector(`[data-step="${stepNumber}"]`);
        if (!step) return;
        
        // Close all other steps
        onboardingSteps.forEach(s => s.classList.remove('active'));
        
        // If clicking on current active step, just collapse it
        if (currentStep === stepNumber && step.classList.contains('active')) {
            step.classList.remove('active');
            return;
        }
        
        // Otherwise, make it active and load content if needed
        currentStep = stepNumber;
        step.classList.add('active');
        
        // Load form content if not already loaded
        loadStepContent(stepNumber);
        
        // Smooth scroll to step
        step.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'center' 
        });
    }
    
    function loadStepContent(stepNumber) {
        const step = document.querySelector(`[data-step="${stepNumber}"]`);
        if (!step) return;
        
        // Check if form is already loaded
        const existingIframe = step.querySelector('.airtable-embed');
        const placeholder = step.querySelector('.form-placeholder');
        
        if (placeholder && !existingIframe) {
            // Auto-load the form
            const loadBtn = placeholder.querySelector('.load-form-btn');
            if (loadBtn) {
                setTimeout(() => loadForm(loadBtn), 300);
            }
        }
    }
    
    function setupFormCompletionDetection() {
        // Listen for iframe load events to detect form completion
        const iframes = document.querySelectorAll('.airtable-embed');
        
        iframes.forEach((iframe, index) => {
            iframe.addEventListener('load', () => {
                // Simulate form completion detection
                // In real implementation, you'd use Airtable webhooks or postMessage
                setTimeout(() => {
                    if (index < iframes.length - 1) {
                        currentStep = index + 2;
                        updateStepStates();
                        showStepCompletionFeedback(index + 1);
                    }
                }, 2000);
            });
        });
    }
    
    function showStepCompletionFeedback(stepNumber) {
        const step = document.querySelector(`[data-step="${stepNumber}"]`);
        const stepStatus = step.querySelector('.step-status i');
        
        // Update step status icon
        stepStatus.className = 'fas fa-check';
        stepStatus.style.color = '#10b981';
        
        // Show success message
        Swal.fire({
            icon: 'success',
            title: 'Step Completed!',
            text: `Step ${stepNumber} has been completed successfully.`,
            timer: 2000,
            timerProgressBar: true,
            showConfirmButton: false,
            background: '#1e293b',
            color: '#f8fafc',
            toast: true,
            position: 'top-end'
        });
    }
}

// Team Member Management
function initializeTeamManagement() {
    // Initialize edit buttons
    const editButtons = document.querySelectorAll('.edit-member-btn');
    editButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            const memberId = e.target.closest('[data-member-id]').dataset.memberId;
            const token = button.onclick.toString().match(/'([^']+)'/)[1];
            editTeamMember(memberId, token);
        });
    });
}

// Add Another Team Member
function addAnotherTeamMember() {
    const teamMembersContainer = document.querySelector('.team-members-container');
    const existingForms = teamMembersContainer.querySelectorAll('.team-member-form');
    
    // Create new form container
    const newFormContainer = document.createElement('div');
    newFormContainer.className = 'team-member-form-container';
    newFormContainer.innerHTML = `
        <div class="form-header">
            <h4>Team Member ${existingForms.length + 1}</h4>
            <button class="remove-form-btn" onclick="removeTeamMemberForm(this)">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <iframe 
            src="${window.dashboardData.formUrls.teamMember}"
            class="airtable-embed team-member-form"
            frameborder="0"
            onmousewheel=""
            width="100%"
            height="100%"
            style="background: transparent; border: 1px solid #ccc; border-radius: 12px; min-height: 600px;">
        </iframe>
    `;
    
    // Add smooth entrance animation
    newFormContainer.style.opacity = '0';
    newFormContainer.style.transform = 'translateY(20px)';
    
    // Insert before the add button
    const addButtonContainer = document.querySelector('.add-member-actions');
    teamMembersContainer.insertBefore(newFormContainer, addButtonContainer);
    
    // Animate in
    setTimeout(() => {
        newFormContainer.style.transition = 'all 0.5s ease';
        newFormContainer.style.opacity = '1';
        newFormContainer.style.transform = 'translateY(0)';
    }, 10);
    
    // Scroll to new form
    setTimeout(() => {
        newFormContainer.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'center' 
        });
    }, 100);
    
    // Show feedback
    Swal.fire({
        icon: 'success',
        title: 'New Team Member Form Added',
        text: 'Please fill out the form for the additional team member.',
        timer: 2000,
        timerProgressBar: true,
        showConfirmButton: false,
        background: '#1e293b',
        color: '#f8fafc',
        toast: true,
        position: 'top-end'
    });
}

// Remove Team Member Form
function removeTeamMemberForm(button) {
    const formContainer = button.closest('.team-member-form-container');
    
    // Animate out
    formContainer.style.transition = 'all 0.3s ease';
    formContainer.style.opacity = '0';
    formContainer.style.transform = 'translateY(-20px)';
    
    setTimeout(() => {
        formContainer.remove();
        updateFormNumbers();
    }, 300);
}

// Update form numbers after removal
function updateFormNumbers() {
    const formContainers = document.querySelectorAll('.team-member-form-container');
    formContainers.forEach((container, index) => {
        const header = container.querySelector('h4');
        if (header) {
            header.textContent = `Team Member ${index + 1}`;
        }
    });
}

// Complete Onboarding
async function completeOnboarding(token) {
    // Show confirmation dialog
    const result = await Swal.fire({
        title: 'Complete Onboarding?',
        text: 'Are you sure you have added all team members and completed all required information?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#10b981',
        cancelButtonColor: '#6b7280',
        confirmButtonText: 'Yes, Complete Onboarding',
        cancelButtonText: 'Not Yet',
        background: '#1e293b',
        color: '#f8fafc'
    });
    
    if (!result.isConfirmed) return;
    
    // Show loading
    Swal.fire({
        title: 'Completing Onboarding...',
        text: 'Please wait while we process your submission.',
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: false,
        background: '#1e293b',
        color: '#f8fafc',
        didOpen: () => {
            Swal.showLoading();
        }
    });
    
    try {
        const response = await fetch('/complete-onboarding', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ token })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Success animation
            await Swal.fire({
                icon: 'success',
                title: 'Onboarding Completed!',
                text: 'Your startup onboarding has been successfully completed.',
                confirmButtonColor: '#10b981',
                background: '#1e293b',
                color: '#f8fafc',
                showClass: {
                    popup: 'animate__animated animate__bounceIn'
                }
            });
            
            // Hide onboarding section and refresh page
            const onboardingSection = document.querySelector('.onboarding-section');
            if (onboardingSection) {
                onboardingSection.style.transition = 'all 0.5s ease';
                onboardingSection.style.opacity = '0';
                onboardingSection.style.transform = 'translateY(-20px)';
                
                setTimeout(() => {
                    location.reload();
                }, 500);
            }
            
        } else {
            throw new Error(data.message);
        }
        
    } catch (error) {
        console.error('Complete onboarding error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Completion Failed',
            text: error.message || 'Failed to complete onboarding. Please try again.',
            confirmButtonColor: '#ef4444',
            background: '#1e293b',
            color: '#f8fafc'
        });
    }
}

// Edit Team Member
async function editTeamMember(memberId, token) {
    // Find member data
    const member = window.dashboardData.teamMembers.find(m => m.id === memberId);
    if (!member) return;
    
    // Create edit modal
    const modal = createEditModal(member, token);
    document.body.appendChild(modal);
    
    // Show modal with animation
    setTimeout(() => {
        modal.classList.add('active');
    }, 10);
}

// Create Edit Modal
function createEditModal(member, token) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>Edit Team Member</h3>
                <p>Update ${member.name || 'team member'} information</p>
            </div>
            
            <form class="modal-form" id="editMemberForm">
                <div class="form-group">
                    <label class="form-label">Personal Email</label>
                    <input type="email" class="form-input" name="Personal email*" 
                           value="${member.email || ''}" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Mobile Number</label>
                    <input type="tel" class="form-input" name="Mobile*" 
                           value="${member.mobile || ''}" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Position at Startup</label>
                    <input type="text" class="form-input" name="Position at startup*" 
                           value="${member.position || ''}" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label">UTS Association</label>
                    <select class="form-input" name="What is your association to UTS?*" required>
                        <option value="">Select association...</option>
                        <option value="Current Student" ${member.utsAssociation === 'Current Student' ? 'selected' : ''}>Current Student</option>
                        <option value="Alumni" ${member.utsAssociation === 'Alumni' ? 'selected' : ''}>Alumni</option>
                        <option value="Staff" ${member.utsAssociation === 'Staff' ? 'selected' : ''}>Staff</option>
                        <option value="External" ${member.utsAssociation === 'External' ? 'selected' : ''}>External</option>
                    </select>
                </div>
                
                <div class="modal-actions">
                    <button type="button" class="btn btn-outline" onclick="closeModal(this)">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Save Changes
                    </button>
                </div>
            </form>
        </div>
    `;
    
    // Handle form submission
    const form = modal.querySelector('#editMemberForm');
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        await handleMemberUpdate(member.id, token, form, modal);
    });
    
    // Handle modal close
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal);
        }
    });
    
    return modal;
}

// Handle Member Update
async function handleMemberUpdate(memberId, token, form, modal) {
    const formData = new FormData(form);
    const updates = {};
    
    for (let [key, value] of formData.entries()) {
        updates[key] = value;
    }
    
    // Show loading state
    const submitBtn = form.querySelector('button[type="submit"]');
    const originalText = submitBtn.innerHTML;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
    submitBtn.disabled = true;
    
    try {
        const response = await fetch('/update-profile', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                token,
                memberId,
                updates
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Show success message
            await Swal.fire({
                icon: 'success',
                title: 'Profile Updated!',
                text: 'Team member information has been updated successfully.',
                timer: 2000,
                timerProgressBar: true,
                showConfirmButton: false,
                background: '#1e293b',
                color: '#f8fafc',
                toast: true,
                position: 'top-end'
            });
            
            // Close modal and refresh
            closeModal(modal);
            setTimeout(() => location.reload(), 1000);
            
        } else {
            throw new Error(data.message);
        }
        
    } catch (error) {
        console.error('Update error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Update Failed',
            text: error.message || 'Failed to update profile. Please try again.',
            confirmButtonColor: '#ef4444',
            background: '#1e293b',
            color: '#f8fafc'
        });
    } finally {
        submitBtn.innerHTML = originalText;
        submitBtn.disabled = false;
    }
}

// Close Modal
function closeModal(element) {
    const modal = element.closest ? element.closest('.modal-overlay') : element;
    modal.classList.remove('active');
    
    setTimeout(() => {
        modal.remove();
    }, 300);
}

// Initialize Animations
function initializeAnimations() {
    // Animate team cards on load
    const teamCards = document.querySelectorAll('.team-member-card');
    teamCards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            card.style.transition = 'all 0.5s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, index * 100);
    });
    
    // Animate onboarding steps
    const onboardingSteps = document.querySelectorAll('.onboarding-step');
    onboardingSteps.forEach((step, index) => {
        step.style.opacity = '0';
        step.style.transform = 'translateX(-20px)';
        
        setTimeout(() => {
            step.style.transition = 'all 0.6s ease';
            step.style.opacity = '1';
            step.style.transform = 'translateX(0)';
        }, index * 200);
    });
}

// Lazy Load Forms Function
function loadForm(button) {
    const placeholder = button.closest('.form-placeholder');
    const formUrl = placeholder.dataset.formUrl;
    const formType = placeholder.dataset.formType;
    
    // Show loading state
    placeholder.classList.add('loading');
    const loadingSpinner = placeholder.querySelector('.loading-spinner');
    loadingSpinner.classList.add('active');
    
    // Create iframe
    const iframe = document.createElement('iframe');
    iframe.src = formUrl;
    iframe.className = 'airtable-embed';
    iframe.frameBorder = '0';
    iframe.width = '100%';
    iframe.height = '100%';
    iframe.style.cssText = 'background: transparent; border: 1px solid #ccc; border-radius: 12px; min-height: 600px;';
    iframe.loading = 'lazy';
    
    // Replace placeholder with iframe when loaded
    iframe.onload = () => {
        placeholder.parentNode.replaceChild(iframe, placeholder);
        showNotification('success', `${formType === 'representative' ? 'Representative' : 'Team member'} form loaded successfully!`);
        
        // Set up form completion detection
        setupFormCompletionDetection(iframe, formType);
    };
    
    iframe.onerror = () => {
        placeholder.classList.remove('loading');
        loadingSpinner.classList.remove('active');
        showNotification('error', 'Failed to load form. Please try again.');
    };
}

// Form completion detection
function setupFormCompletionDetection(iframe, formType) {
    // Listen for messages from iframe (if Airtable supports postMessage)
    window.addEventListener('message', function(event) {
        if (event.origin === 'https://airtable.com' && event.data.type === 'form_submitted') {
            markStepAsCompleted(formType);
        }
    });
    
    // Fallback: Check for URL changes or form elements
    // This is a simplified approach - in production you might use Airtable webhooks
    setTimeout(() => {
        // Simulate completion detection after some time
        // In real implementation, you'd check actual form submission
    }, 5000);
}

function markStepAsCompleted(formType) {
    let stepNumber;
    if (formType === 'startup') stepNumber = 1;
    else if (formType === 'representative') stepNumber = 2;
    else if (formType === 'team-member') stepNumber = 3;
    
    const step = document.querySelector(`[data-step="${stepNumber}"]`);
    if (step) {
        step.setAttribute('data-completed', 'true');
        step.classList.add('completed');
        
        const stepStatus = step.querySelector('.step-status i');
        stepStatus.className = 'fas fa-check';
        stepStatus.style.color = '#10b981';
        
        // Update step number background to green
        const stepNumber_elem = step.querySelector('.step-number');
        stepNumber_elem.style.background = 'var(--gradient-success)';
        
        // Don't automatically activate next step - let user choose
        showNotification('success', `Step ${stepNumber} completed! You can now proceed to the next step.`);
    }
}

// Add function to manually mark step as incomplete (for re-editing)
function markStepAsIncomplete(stepNumber) {
    const step = document.querySelector(`[data-step="${stepNumber}"]`);
    if (step) {
        step.setAttribute('data-completed', 'false');
        step.classList.remove('completed');
        
        const stepStatus = step.querySelector('.step-status i');
        stepStatus.className = 'fas fa-clock';
        stepStatus.style.color = '';
        
        const stepNumber_elem = step.querySelector('.step-number');
        stepNumber_elem.style.background = '';
        
        showNotification('info', `Step ${stepNumber} reopened for editing.`);
    }
}

// Auto-load first form when page loads
document.addEventListener('DOMContentLoaded', function() {
    // Auto-load the startup form (first step) immediately
    const startupForm = document.querySelector('.startup-form');
    if (startupForm) {
        startupForm.loading = 'eager'; // Load immediately
        setupFormCompletionDetection(startupForm, 'startup');
    }
    
    // Set up intersection observer for lazy loading other forms
    const formPlaceholders = document.querySelectorAll('.form-placeholder');
    
    if (formPlaceholders.length > 0 && 'IntersectionObserver' in window) {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const loadBtn = entry.target.querySelector('.load-form-btn');
                    if (loadBtn) {
                        // Auto-load when form comes into view
                        setTimeout(() => loadForm(loadBtn), 500);
                        observer.unobserve(entry.target);
                    }
                }
            });
        }, {
            rootMargin: '100px'
        });
        
        formPlaceholders.forEach(placeholder => {
            observer.observe(placeholder);
        });
    }
});

// Utility Functions
function showNotification(type, message) {
    Swal.fire({
        icon: type,
        title: message,
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        background: '#1e293b',
        color: '#f8fafc'
    });
}

// Add dynamic CSS for enhanced interactions
const style = document.createElement('style');
style.textContent = `
    .form-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        padding: 1rem;
        background: rgba(99, 102, 241, 0.1);
        border-radius: 12px;
        border: 1px solid var(--primary-color);
    }
    
    .form-header h4 {
        margin: 0;
        color: var(--primary-color);
        font-weight: 600;
    }
    
    .remove-form-btn {
        background: rgba(239, 68, 68, 0.1);
        border: 1px solid #ef4444;
        color: #ef4444;
        border-radius: 8px;
        padding: 0.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .remove-form-btn:hover {
        background: rgba(239, 68, 68, 0.2);
        transform: scale(1.1);
    }
    
    .team-member-form-container {
        margin-bottom: 1.5rem;
        padding: 1rem;
        background: var(--dark-surface);
        border-radius: 16px;
        border: 1px solid var(--dark-border);
    }
    
    /* Enhanced modal animations */
    .modal-overlay {
        backdrop-filter: blur(10px);
    }
    
    .modal-overlay.active .modal-content {
        animation: modalSlideIn 0.3s ease-out;
    }
    
    @keyframes modalSlideIn {
        from {
            opacity: 0;
            transform: translateY(-50px) scale(0.9);
        }
        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }
    
    /* Form input focus effects */
    .form-input:focus {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(99, 102, 241, 0.15);
    }
    
    /* Button hover effects */
    .btn:hover {
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }
    
    /* Card hover effects */
    .team-member-card:hover .member-avatar {
        transform: scale(1.1);
        box-shadow: 0 8px 25px rgba(99, 102, 241, 0.3);
    }
    
    .member-avatar {
        transition: all 0.3s ease;
    }
`;

document.head.appendChild(style); 